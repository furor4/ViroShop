from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from aiogram import Router, F

from keyboards.profile_kb import add_balance, back_to_profile
from database.viro_db import SessionLocal, User
from keyboards.start_kb import start_keyboard

router = Router()


class AddBalance(StatesGroup):
    adding_balance = State()
    withdrawing_balance = State()


@router.callback_query(F.data == 'profile')
async def profile(callback: CallbackQuery):
    user_id = callback.from_user.id

    session = SessionLocal()
    user = session.query(User).filter(User.user_id == user_id).first()

    if user:
        profile_text = (
            f'üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
            f'ID: {callback.from_user.id}\n'
            f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{callback.from_user.username}\n\n'
            f'üíµ –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ'
        )
    else:
        profile_text = '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'

    await callback.answer()
    await callback.message.edit_text(profile_text, reply_markup=add_balance())


@router.callback_query(StateFilter(None), F.data == 'add_balance')
async def add_amount(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.\n–ü—Ä–∏–º–µ—Ä: 1500')
    await state.set_state(AddBalance.adding_balance)


@router.message(AddBalance.adding_balance)
async def process_add_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError('Amount must be positive.')

        user_id = message.from_user.id
        session = SessionLocal()
        user = session.query(User).filter(User.user_id == user_id).first()

        if user:
            user.balance += amount
            session.commit()
            await message.answer(f'‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ!\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ',
                                 reply_markup=back_to_profile())
        else:
            await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except ValueError:
        await message.answer('‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –Ω—É–ª—è.')

    await state.clear()


@router.callback_query(StateFilter(None), F.data == 'withdraw_balance')
async def withdraw_amount(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    session = SessionLocal()
    user = session.query(User).filter(User.user_id == user_id).first()

    if user:
        await callback.answer()
        await callback.message.edit_text(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è —Å –±–∞–ª–∞–Ω—Å–∞.\n–ü—Ä–∏–º–µ—Ä: 1500\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:'
                                         f' {user.balance}‚ÇΩ')
        await state.set_state(AddBalance.withdrawing_balance)
    else:
        await callback.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')


@router.message(AddBalance.withdrawing_balance)
async def process_withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError('Amount must be positive.')

        user_id = message.from_user.id
        session = SessionLocal()
        user = session.query(User).filter(User.user_id == user_id).first()

        if user:
            if user.balance >= amount:
                user.balance -= amount
                session.commit()
                await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–∞–ª–∏—á–∏–ª–∏ {amount}‚ÇΩ!\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ',
                                     reply_markup=back_to_profile())
            else:
                await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', reply_markup=back_to_profile())
        else:
            await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except ValueError:
        await message.answer('‚ùå –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ –Ω—É–ª—è.', reply_markup=back_to_profile())
    await state.clear()


@router.callback_query(F.data == 'back_to_start')
async def to_start(callback: CallbackQuery):
    await callback.message.edit_text('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º ViroShop. –ü—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                                     reply_markup=start_keyboard())
    await callback.answer()


@router.callback_query(F.data == 'back_to_profile')
async def to_profile(callback: CallbackQuery):
    user_id = callback.from_user.id

    session = SessionLocal()
    user = session.query(User).filter(User.user_id == user_id).first()
    if user:
        profile_text = (
            f'üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
            f'ID: {callback.from_user.id}\n'
            f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{callback.from_user.username}\n\n'
            f'üíµ –ë–∞–ª–∞–Ω—Å: {user.balance}‚ÇΩ'
        )
    else:
        profile_text = '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω'
    await callback.answer()
    await callback.message.edit_text(profile_text, reply_markup=add_balance())
